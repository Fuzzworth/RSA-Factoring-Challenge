#!/usr/bin/python3
from sys import argv
from math import sqrt
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def mod_exp(base, exponent, modulus):
    result = 1
    base = base % modulus
    
    while exponent > 0:
        if exponent % 2 == 1:
            result = (result * base) % modulus
        base = (base * base) % modulus
        exponent = exponent // 2
    
    return result

def pollard_p_minus_1(n, bound):
    a = 2
    
    for i in range(2, bound+1):
        a = mod_exp(a, i, n)
        d = gcd(a - 1, n)
        
        if 1 < d < n:
            return d
        
    return None

if len(argv) != 2:
    print("{} <file>".format(argv[0]))
with open(argv[1]) as factor_file:
    for line in factor_file:
        line = int(line)
        factor = pollard_p_minus_1(line)
        print("{:d}={:d}*{:d}".format(line, int(line / factor), int(factor)))
