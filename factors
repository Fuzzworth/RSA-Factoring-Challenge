#!/usr/bin/python3
from sys import argv
def prime_factors(n):
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n //= 2
    sqrt_n = math.isqrt(n)
    for i in range(3, sqrt_n + 1, 2):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n > 2:
        factors.append(n)
    return factors

def lowest_common_divisor(numbers):
    prime_factors_list = []
    for number in numbers:
        prime_factors_list.append(prime_factors(number))
    common_factors = set(prime_factors_list[0])
    for factors in prime_factors_list[1:]:
        common_factors.intersection_update(factors)
    lcd = 1
    for factor in common_factors:
        power = max([factors.count(factor) for factors in prime_factors_list])
        lcd *= factor ** power
    return lcd
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def pollard_rho(n):
    if n % 2 == 0:
        return 2

    x = 2
    y = 2
    d = 1

    f = lambda x: (x**2 + 1) % n

    while d == 1:
        x = f(x)
        y = f(f(y))
        print(abs( x - y ))
        d = gcd(abs(x - y), n)

        if d == n:
            return None

    return d


if len(argv) != 2:
    print("{} <file>".format(argv[0]))
with open(argv[1]) as factor_file:
    for line in factor_file:
        line = int(line)
        factor = lowest_common_divsor(line)
        print("{:d}={:d}*{:d}".format(line, int(line / factor), int(factor)))
